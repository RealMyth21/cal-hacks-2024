#!/usr/bin/env python
# coding: utf-8

import os
import torch
import torchaudio
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
import torch.nn as nn
import torch.optim as optim
import numpy as np
import scipy
import librosa
from scipy.io import wavfile
from pydub import AudioSegment
from IPython.display import Audio, display

# Step 1: Convert MP3 to WAV
AudioSegment.from_wav('/Users/charlottelaw/medhaviNew.wav').export(f"medhavi.mp3", format="mp3")
y, sr = librosa.load('/Users/charlottelaw/medhavi.mp3', mono=True, sr=16000, offset=0, duration=5)
scipy.io.wavfile.write('outputGun.wav', sr, (y * 32767).astype(np.int16))
display(Audio(y, rate=sr))

# Step 2: Define the Audio Dataset
class AudioDataset(Dataset):
    def __init__(self, dataset_dir, transform=None, max_len=1000):
        self.dataset_dir = dataset_dir
        self.classes = [d for d in os.listdir(dataset_dir) if os.path.isdir(os.path.join(dataset_dir, d))]
        self.files = []
        self.max_len = max_len
        self.transform = transform

        for label in self.classes:
            class_dir = os.path.join(dataset_dir, label)
            for file in os.listdir(class_dir):
                if file.endswith(".wav"):  # Assuming audio files are in WAV format
                    self.files.append((os.path.join(class_dir, file), label))

    def __len__(self):
        return len(self.files)

    def __getitem__(self, idx):
        file_path, label = self.files[idx]
        waveform, _ = torchaudio.load(file_path)
        waveform = waveform.mean(dim=0, keepdim=True)  # Convert to mono

        if self.transform:
            waveform = self.transform(waveform)

        # Truncate or pad the waveform to the max length
        if waveform.size(2) > self.max_len:
            waveform = waveform[:, :, :self.max_len]
        elif waveform.size(2) < self.max_len:
            padding = self.max_len - waveform.size(2)
            waveform = torch.nn.functional.pad(waveform, (0, padding))

        return waveform, torch.tensor(self.classes.index(label))

def collate_fn(batch):
    waveforms, labels = zip(*batch)
    waveforms = torch.stack(waveforms)
    labels = torch.tensor(labels)
    return waveforms, labels

# Step 3: Define the SimpleCNN model
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(32 * 10 * (dataset.max_len // 4), 128)  # Adjusted dimensions after pooling
        self.fc2 = nn.Linear(128, len(dataset.classes))  # Adjusted number of classes

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)
        x = x.view(x.size(0), -1)  # Flatten
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Step 4: Training and Testing
if __name__ == "__main__":
    # Define transform (MFCC)
    transform = torchaudio.transforms.MFCC()

    # Load dataset and split into training and testing sets
    dataset = AudioDataset('dataset/', transform=transform)
    train_set, test_set = train_test_split(dataset, test_size=0.2, random_state=42)

    # Create DataLoader instances
    train_loader = DataLoader(train_set, batch_size=32, shuffle=True, collate_fn=collate_fn)
    test_loader = DataLoader(test_set, batch_size=32, shuffle=False, collate_fn=collate_fn)

    # Create an instance of the model
    model = SimpleCNN()

    # Define loss function and optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # Training loop
    num_epochs = 5
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)

    for epoch in range(num_epochs):
        model.train()
        running_loss = 0.0
        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {running_loss/len(train_loader)}")

    # Testing loop
    model.eval()
    total_correct = 0
    total_samples = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs, 1)
            total_samples += labels.size(0)
            total_correct += (predicted == labels).sum().item()

    print(f"Accuracy: {total_correct / total_samples:.4f}")

    # Step 5: Save the trained model
    torch.save(model.state_dict(), 'simple_cnn_model.pth')
